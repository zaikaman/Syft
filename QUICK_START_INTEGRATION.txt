# QUICK START: INTEGRATING SOROSWAP WITH YOUR VAULT
# ===================================================

## STEP 1: Set Router in Your Smart Contract
```bash
stellar contract invoke \
  --id <YOUR_VAULT_CONTRACT_ID> \
  --source <YOUR_SECRET_KEY> \
  --network testnet \
  -- set_router \
  --router CCMAPXWVZD4USEKDWRYS7DA4Y3D7E2SDMGBFJUCEXTC7VN6CUBGWPFUS
```

## STEP 2: Update Backend .env
Add to `backend/.env`:
```env
# Stellar Network
STELLAR_NETWORK=testnet
STELLAR_RPC_URL=https://soroban-testnet.stellar.org:443
STELLAR_HORIZON_URL=https://horizon-testnet.stellar.org

# Soroswap DEX
SOROSWAP_ROUTER_ADDRESS=CCMAPXWVZD4USEKDWRYS7DA4Y3D7E2SDMGBFJUCEXTC7VN6CUBGWPFUS
SOROSWAP_FACTORY_ADDRESS=CDJTMBYKNUGINFQALHDMPLZYNGUV42GPN4B7QOYTWHRC4EE5IYJM6AES

# Popular Tokens (Testnet)
TESTNET_XLM=CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC
TESTNET_USDC=CBIELTK6YBZJU5UP2WWQEUCYKLPU6AUNZ2BQ4WWFEIE3USCIHMXQDAMA
```

## STEP 3: Test Your Vault Integration

### 3.1 Approve USDC for Vault
```bash
stellar contract invoke \
  --id CBIELTK6YBZJU5UP2WWQEUCYKLPU6AUNZ2BQ4WWFEIE3USCIHMXQDAMA \
  --source <YOUR_SECRET_KEY> \
  --network testnet \
  -- approve \
  --from <YOUR_ADDRESS> \
  --spender <YOUR_VAULT_CONTRACT_ID> \
  --amount 10000000000 \
  --expiration_ledger 999999999
```

### 3.2 Deposit to Vault
```bash
stellar contract invoke \
  --id <YOUR_VAULT_CONTRACT_ID> \
  --source <YOUR_SECRET_KEY> \
  --network testnet \
  -- deposit \
  --user <YOUR_ADDRESS> \
  --amount 1000000000
```

### 3.3 Trigger Rebalance (Test Swaps!)
```bash
stellar contract invoke \
  --id <YOUR_VAULT_CONTRACT_ID> \
  --source <YOUR_SECRET_KEY> \
  --network testnet \
  -- trigger_rebalance
```

### 3.4 Check Vault State
```bash
stellar contract invoke \
  --id <YOUR_VAULT_CONTRACT_ID> \
  --network testnet \
  -- get_state
```

## STEP 4: For Production Code (Uncomment in Rust)

### In `token_client.rs`:
```rust
// Uncomment this:
use soroban_sdk::token::TokenClient;
let token_client = TokenClient::new(env, token);
token_client.transfer(from, to, &amount);
```

### In `swap_router.rs`:
```rust
// Add to Cargo.toml first, then uncomment:
use soroswap_router::SoroswapRouterClient;
let router_client = SoroswapRouterClient::new(env, router_address);
let amount_out = router_client.swap_chained(...);
```

## STEP 5: Mainnet Deployment Checklist

- [ ] All tests pass on testnet
- [ ] Swaps working correctly
- [ ] Deposit/withdraw tested
- [ ] Rebalancing tested with multiple assets
- [ ] Security audit completed
- [ ] Gas costs optimized
- [ ] Emergency procedures defined
- [ ] Update router address to mainnet:
      `CAG5LRYQ5JVEUI5TEID72EYOVX44TTUJT5BQR2J6J77FH65PCCFAJDDH`
- [ ] Update RPC URL to mainnet provider
- [ ] Fund deployer account with real XLM
- [ ] Deploy contracts
- [ ] Verify on block explorer

## DEBUGGING TIPS

### Check if pool exists:
```bash
stellar contract invoke \
  --id CDJTMBYKNUGINFQALHDMPLZYNGUV42GPN4B7QOYTWHRC4EE5IYJM6AES \
  --network testnet \
  -- get_pair \
  --token_a <TOKEN_A_ADDRESS> \
  --token_b <TOKEN_B_ADDRESS>
```

### Check token balance:
```bash
stellar contract invoke \
  --id <TOKEN_ADDRESS> \
  --network testnet \
  -- balance \
  --id <YOUR_VAULT_CONTRACT_ID>
```

### Check allowance:
```bash
stellar contract invoke \
  --id <TOKEN_ADDRESS> \
  --network testnet \
  -- allowance \
  --from <YOUR_VAULT_CONTRACT_ID> \
  --spender CCMAPXWVZD4USEKDWRYS7DA4Y3D7E2SDMGBFJUCEXTC7VN6CUBGWPFUS
```

## COMMON ISSUES

1. **"Insufficient allowance"**
   - Run the approve command first
   - Make sure amount is high enough

2. **"Pool not found"**
   - Verify pool exists with get_pair
   - Check token addresses are correct
   - Pool might not exist for this pair

3. **"Slippage too high"**
   - Increase slippage tolerance
   - Pool might have low liquidity
   - Try smaller amounts

4. **"Transfer failed"**
   - Check vault has token balance
   - Verify token address is correct
   - Ensure proper authorization

## YOU'RE ALL SET! ðŸš€

Your vault now has:
âœ… Real token transfers
âœ… DEX integration (Soroswap)
âœ… Production swap logic
âœ… Rebalancing with actual trades
âœ… No API keys needed
âœ… Decentralized trading

Just deploy, test, and you're ready to trade!
