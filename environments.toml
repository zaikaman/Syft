### Development environment configuration
[development.network]
rpc-url = "http://localhost:8000/rpc"
network-passphrase = "Standalone Network ; February 2017"
run-locally = true # automatically start the local network container, if not already running

[[development.accounts]]
name = "me" # Required. Keys for this account will be saved to `./.stellar/identity`
default = true # Optional. Whether to use this account as the `--source` for commands that need one.

[development.contracts]
fungible_token_interface_example = { client = true, constructor_args = "--owner me --initial_supply 1000000000000000000000000" }
nft_enumerable_example = { client = true, constructor_args = "--owner me" }

# Rather than in one list, TOML allows specifying contracts in their own "sections"
[development.contracts.guess_the_number]
# Generate a contract client (NPM package) for this contract. This means:
#   - compile (build) the contract source to Wasm
#   - deploy the contract to the `network` specified above
#   - run any `init` script specified below
#   - generate an NPM client (also called the "TS Bindings") for the deployed
#     contract to the NPM workspace in `packages/*`
#   - import the contract for easy access in the frontend in `src/contracts`
#
# You can only use `client = true` when:
#   - the contract source must be part of the local Cargo workspace (in the
#     PROJECT_ROOT/contracts folder)
#   - The specified name here ("guess_the_number") must match the
#     underscored-version of the `name` in the contract's Cargo.toml.
#   - The environment is `development` or `testing`
client = true

# If your contract has a `__constructor`, specify your arguments to it here.
# These are the same arguments you could pass after the `--` in a call to
# `stellar contract deploy`
# Only available in `development` and `testing` environments
constructor_args = """
--admin me
"""

# Calls to the contract to make after it's deployed and initialized with
# `constructor_args`. Commands here will be appended to:
#
#     stellar contract invoke \
#         --id [this contract's id] \
#         --source [first (or `default`) account, specified above] \
#         --network [specified above] \
#         --
#
# That is, each line in this `init` script is *only* the part after the `--` in
# a `stellar contract invoke` command.
#
# To use another account as the `--source`, prefix the line with
# `STELLAR_ACCOUNT=other-account`.
#
# Only supported in `development` and `testing` environments.
after_deploy = """
reset
"""

# Coming Soon: Specify live contracts to bind & import in this project using the given name.
# During initialization, these contracts will also be "spooned" into the development network,
# meaning that their data will match the live network at the given sequence number.
# [development.contracts.eurc]
# environment = "production"
# address = "C..."
# at-ledger-sequence = 50153603

### Staging environment configuration
[staging.network]
rpc-url = "https://soroban-testnet.stellar.org"
network-passphrase = "Test SDF Network ; September 2015"

[[staging.accounts]]
name = "testnet-user"
default = true

[staging.contracts]
# soroban-atomic-swap-contract = { id = "C123..." }
# soroban-auth-contract = { id = "C234..." }
# soroban-errors-contract = { id = "C345..." }
# soroban-hello-world-contract = { id = "C456..." }
# soroban-increment-contract = { id = "C567..." }
# soroban-token-contract = { id = "C678..." }
# eurc = { id = "C789..." }

### Production environment configuration
[production.network]
rpc-url = "https://our-custom-rpc-provider.cool"
network-passphrase = "Public Global Stellar Network ; September 2015"

[[production.accounts]]
name = "official-team-account"
default = true

[production.contracts]
# soroban-atomic-swap-contract = { id = "C987..." }
# soroban-auth-contract = { id = "C876..." }
# soroban-errors-contract = { id = "C765..." }
# soroban-hello-world-contract = { id = "C654..." }
# soroban-increment-contract = { id = "C543..." }
# soroban-token-contract = { id = "C432..." }
# eurc = { id = "C321..." }
