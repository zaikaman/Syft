===========================================
 SYFT DEFI PLATFORM - TESTING GUIDE
===========================================

Last Updated: January 2025
Prerequisites: Complete SETUP.md steps first
Estimated Testing Time: 45-60 minutes

This guide walks you through testing all implemented features of the Syft DeFi platform.

===========================================
 BEFORE YOU START
===========================================

1. SETUP COMPLETE?
   ‚òê Backend running on http://localhost:3001
   ‚òê Frontend running on http://localhost:5173
   ‚òê Supabase database migrations completed
   ‚òê Environment variables configured (.env files)
   ‚òê Wallet extension installed (Freighter recommended)
   ‚òê Test wallet funded with XLM on Futurenet

2. OPEN THESE TOOLS:
   - Browser: Chrome/Edge (with DevTools open - press F12)
   - Backend terminal (to see API logs)
   - Frontend terminal (to see any errors)

===========================================
 TEST 1: WALLET CONNECTION (5 min)
===========================================

FEATURE: One-click wallet integration with Stellar

STEPS:
1. Open http://localhost:5173
2. Click "Connect Wallet" button in header
3. Select "Freighter" from wallet options
4. Approve connection in Freighter popup
5. Wait 5-10 seconds

EXPECTED RESULTS:
‚úì Wallet address appears in header (e.g., "GABC...XYZ")
‚úì "Connect Wallet" button changes to show your address
‚úì You can see your XLM balance displayed
‚úì No error messages in browser console

TROUBLESHOOTING:
‚úó Wallet not detected?
  ‚Üí Make sure Freighter extension is installed and unlocked
  ‚Üí Refresh the page
‚úó Wrong network?
  ‚Üí Open Freighter settings, switch to "Futurenet"
  ‚Üí Disconnect and reconnect wallet

TEST PASSED: ‚òê Yes  ‚òê No


===========================================
 TEST 2: DASHBOARD (Empty State) (3 min)
===========================================

FEATURE: Dashboard displays user's vaults and portfolio

STEPS:
1. With wallet connected, navigate to "Dashboard"
2. Observe the empty state

EXPECTED RESULTS:
‚úì Dashboard loads without errors
‚úì Shows "No vaults yet" message
‚úì Stats show "0" for Active Vaults
‚úì "Create Vault" button is visible
‚úì Asset allocation shows "No assets yet"

CHECK BROWSER CONSOLE:
‚úì Should see API call to GET /api/vaults?owner=YOUR_ADDRESS
‚úì Response should be: { success: true, data: { vaults: [], count: 0 } }

CHECK BACKEND LOGS:
‚úì Should see: "GET /api/vaults" request logged

TEST PASSED: ‚òê Yes  ‚òê No


===========================================
 TEST 3: VISUAL VAULT BUILDER (15 min)
===========================================

FEATURE: Drag-and-drop visual strategy builder

STEPS:
1. Click "Create Vault" or navigate to "/builder"
2. You should see:
   - Block Palette on the left (Assets, Conditions, Actions)
   - Canvas in the center
   - Strategy Preview on the right

3. DRAG SOME BLOCKS:
   a. Drag an "Asset Block" (e.g., XLM) onto the canvas
   b. Drag a "Condition Block" (e.g., "Allocation Drift") onto canvas
   c. Drag an "Action Block" (e.g., "Rebalance") onto canvas

4. CONNECT BLOCKS:
   a. Click and drag from XLM output handle to Condition input
   b. Drag from Condition output to Action input

5. OBSERVE PREVIEW:
   - Right panel should update with human-readable strategy
   - Should say something like: "When XLM allocation drifts by X%, rebalance"

EXPECTED RESULTS:
‚úì Blocks can be dragged from palette to canvas
‚úì Blocks snap to grid
‚úì Connections can be drawn between blocks
‚úì Invalid connections are rejected (wrong types)
‚úì Strategy preview updates in real-time
‚úì No console errors

TEST BLOCK DELETION:
- Select a block on canvas (click it)
- Press DELETE key
- Block should be removed

TEST UNDO/REDO:
- Make some changes (add/remove blocks)
- Click Undo button (or Ctrl+Z)
- Changes should revert
- Click Redo button (or Ctrl+Y)
- Changes should reapply

TEST PASSED: ‚òê Yes  ‚òê No


===========================================
 TEST 4: SAVE VAULT DRAFT (5 min)
===========================================

FEATURE: Save incomplete vault configurations

STEPS:
1. In the builder, create a simple strategy:
   - Add 2 asset blocks (XLM, USDC)
   - Add 1 condition block
   - Connect them

2. Click "Save Draft" button
3. Wait for response

EXPECTED RESULTS:
‚úì Alert appears: "Vault draft saved successfully!"
‚úì No error messages

CHECK BACKEND LOGS:
‚úì Should see: POST /api/vaults/drafts
‚úì Should log successful insert

CHECK SUPABASE:
1. Open your Supabase project dashboard
2. Go to Table Editor ‚Üí vaults table
3. You should see a new row with:
   - vault_id: starts with "draft-"
   - owner: your wallet address
   - status: "draft"
   - config: JSON with your blocks
   - contract_address: null

TEST PASSED: ‚òê Yes  ‚òê No


===========================================
 TEST 5: VAULT DEPLOYMENT (10 min)
===========================================

FEATURE: Deploy vault to Stellar blockchain

‚ö†Ô∏è NOTE: This requires contracts to be built and deployed.
If you haven't done this, skip this test for now.

STEPS:
1. In the builder, create a COMPLETE vault strategy:
   - At least 1 asset block
   - At least 1 condition block
   - At least 1 action block
   - All blocks properly connected

2. Configure block parameters:
   - Click each block to set values
   - E.g., set allocation percentages, thresholds

3. Click "Deploy Vault" button

4. Validation should run:
   - If errors, fix them first (shown in red)
   - If warnings, you can proceed (shown in yellow)

5. Enter your PRIVATE KEY when prompted
   ‚ö†Ô∏è WARNING: This is FOR TESTING ONLY on Futurenet
   ‚ö†Ô∏è NEVER do this with mainnet funds

6. Wait for deployment (30-60 seconds)

EXPECTED RESULTS:
‚úì Progress indicator shows deployment status
‚úì Success alert appears with:
  - Vault ID
  - Contract Address
‚úì Redirects to Dashboard

CHECK SUPABASE:
‚úì New row in vaults table with status: "active"
‚úì contract_address field is populated

TEST PASSED: ‚òê Yes  ‚òê No
SKIPPED: ‚òê (contracts not deployed yet)


===========================================
 TEST 6: DASHBOARD (With Vaults) (5 min)
===========================================

FEATURE: View deployed vaults in dashboard

PREREQUISITE: Complete Test 4 or Test 5

STEPS:
1. Navigate to Dashboard
2. Observe vault list

EXPECTED RESULTS:
‚úì Your vault(s) appear in the "Active Vaults" section
‚úì Each vault shows:
  - Name (if you set one, or "Unnamed Vault")
  - Asset allocation (e.g., "XLM/USDC")
  - Vault ID (first 8 characters)
  - Status indicator (green dot for active, gray for draft)
  - "View Details" button
‚úì Stats update to reflect vault count
‚úì Asset allocation pie chart shows your assets

TEST PASSED: ‚òê Yes  ‚òê No


===========================================
 TEST 7: SENTIMENT INDICATOR (5 min)
===========================================

FEATURE: AI-powered sentiment analysis for assets

‚ö†Ô∏è NOTE: Requires API keys (Twitter/Reddit/OpenAI) configured
If not configured, will show mock data

STEPS:
1. Go to Vault Builder
2. Drag an asset block (e.g., XLM) onto canvas
3. Look for sentiment indicator on the block or in side panel

EXPECTED RESULTS (If APIs configured):
‚úì Sentiment loads after 1-2 seconds
‚úì Shows sentiment emoji (üöÄ üòä üòê üòü üò±)
‚úì Shows sentiment label (Very Positive, Positive, etc.)
‚úì Shows confidence percentage
‚úì Shows number of data points analyzed

EXPECTED RESULTS (If APIs NOT configured):
‚úì Shows random mock sentiment (for testing UI)
‚úì No errors in console
‚úì Falls back gracefully

CHECK BACKEND (If APIs configured):
‚úì Should see API call to Twitter/Reddit services
‚úì Should see OpenAI sentiment classification
‚úì May take 3-5 seconds first time (no cache)

TEST PASSED: ‚òê Yes  ‚òê No
MOCK DATA USED: ‚òê Yes (expected if no API keys)


===========================================
 TEST 8: AI SUGGESTIONS (5 min)
===========================================

FEATURE: Get AI-powered strategy improvements

‚ö†Ô∏è NOTE: Requires OpenAI API key configured

STEPS:
1. Create a vault strategy in the builder
2. Click "Get AI Suggestions" button (if visible)
3. Wait for suggestions to load

EXPECTED RESULTS (If OpenAI configured):
‚úì Suggestions panel appears
‚úì Shows 3-5 strategy improvement ideas
‚úì Each suggestion has:
  - Title
  - Description
  - Reasoning
  - Confidence score
‚úì Can click to view details
‚úì Can apply suggestions to modify vault

EXPECTED RESULTS (If OpenAI NOT configured):
‚úì Error message or feature not available
‚úì No crash

TEST PASSED: ‚òê Yes  ‚òê No
SKIPPED: ‚òê (OpenAI not configured)


===========================================
 TEST 9: BACKTESTING (10 min)
===========================================

FEATURE: Test vault strategy against historical data

‚ö†Ô∏è NOTE: Requires deployed vault or saved draft

STEPS:
1. Navigate to Backtests page (if available)
   OR: Click "Backtest" from vault details
2. Select time period (e.g., "Last 30 days")
3. Click "Run Backtest"
4. Wait for simulation to complete (10-20 seconds)

EXPECTED RESULTS:
‚úì Progress indicator during simulation
‚úì Results page shows:
  - Performance chart
  - Total returns
  - Max drawdown
  - Sharpe ratio (if calculated)
  - Number of rebalances
  - Comparison to buy-and-hold
‚úì Can export results as JSON

CHECK BACKEND LOGS:
‚úì Should see historical price fetching
‚úì Should see backtest engine running
‚úì Should see performance calculations

TEST PASSED: ‚òê Yes  ‚òê No
SKIPPED: ‚òê (feature not fully implemented yet)


===========================================
 TEST 10: ERROR HANDLING (5 min)
===========================================

FEATURE: Graceful error handling and user feedback

STEPS TO TEST:
1. Disconnect wallet while on dashboard
   ‚Üí Should show "Connect wallet" message

2. Stop backend server (Ctrl+C in backend terminal)
3. Try to save a vault draft
   ‚Üí Should show error message (not crash)

4. Restart backend
5. Try invalid vault configuration (e.g., no blocks)
6. Try to deploy
   ‚Üí Should show validation errors

EXPECTED RESULTS:
‚úì No white screen of death
‚úì Clear error messages
‚úì App remains functional after errors
‚úì Can retry failed operations

TEST PASSED: ‚òê Yes  ‚òê No


===========================================
 TEST 11: RESPONSIVE DESIGN (3 min)
===========================================

FEATURE: Works on different screen sizes

STEPS:
1. Open browser DevTools (F12)
2. Toggle device toolbar (Ctrl+Shift+M)
3. Test these viewports:
   - Mobile (375px)
   - Tablet (768px)
   - Desktop (1920px)

EXPECTED RESULTS:
‚úì Layout adjusts to screen size
‚úì No horizontal scrolling
‚úì Buttons remain accessible
‚úì Text remains readable
‚úì Builder canvas scales appropriately

TEST PASSED: ‚òê Yes  ‚òê No


===========================================
 TEST 12: PERFORMANCE CHECK (2 min)
===========================================

FEATURE: Fast load times and smooth interactions

STEPS:
1. Open Network tab in DevTools
2. Refresh homepage
3. Check load times

EXPECTED BENCHMARKS:
‚úì Initial page load: < 3 seconds
‚úì API responses: < 1 second
‚úì Block dragging: smooth, no lag
‚úì No memory leaks (check Performance tab)

TEST PASSED: ‚òê Yes  ‚òê No


===========================================
 TESTING SUMMARY
===========================================

Total Tests: 12
Passed: _____
Failed: _____
Skipped: _____

===========================================
 WHAT WORKS (Based on Your Testing)
===========================================

‚úì CONFIRMED WORKING:
‚òê Wallet connection
‚òê Dashboard (shows vaults from database)
‚òê Visual builder (drag-and-drop blocks)
‚òê Save vault drafts
‚òê Vault deployment (if contracts deployed)
‚òê Sentiment indicators (with or without API)
‚òê Error handling

‚ö†Ô∏è PARTIALLY WORKING (needs more setup):
‚òê AI suggestions (needs OpenAI key)
‚òê Sentiment analysis (needs social media APIs)
‚òê Backtesting (needs deployed vaults)

‚úó NOT YET WORKING:
‚òê NFT minting
‚òê Marketplace
‚òê Yield distribution
‚òê Automatic rebalancing triggers

===========================================
 KNOWN LIMITATIONS (MVP STAGE)
===========================================

1. MOCK DATA USED FOR:
   - Historical APY (pool contracts not queried yet)
   - Sentiment (if APIs not configured)
   - Performance metrics (needs real vault operations)

2. MANUAL PROCESSES:
   - Private key input (should use wallet signing)
   - No automatic rebalancing yet (needs monitoring service)
   - No real pool interactions (needs contract integration)

3. MISSING FEATURES (from tasks.md):
   - NFT marketplace (Task T124-T138)
   - Vault co-ownership
   - Profit distribution
   - Advanced backtesting metrics

===========================================
 HOW TO TEST SPECIFIC FEATURES
===========================================

TO TEST WALLET CONNECTION:
‚Üí Just click "Connect Wallet" and approve

TO TEST DASHBOARD:
‚Üí Connect wallet, create a vault draft, refresh dashboard

TO TEST BUILDER:
‚Üí Go to /builder, drag blocks, see preview update

TO TEST SAVE/DEPLOY:
‚Üí Create valid strategy, click Save or Deploy

TO TEST SENTIMENT:
‚Üí Add asset block in builder, wait for indicator

TO TEST AI SUGGESTIONS:
‚Üí Need OpenAI key, then click "Get Suggestions"

TO TEST BACKTESTING:
‚Üí Need vault + historical data, run simulation

===========================================
 TROUBLESHOOTING COMMON ISSUES
===========================================

ISSUE: "Cannot connect wallet"
FIX: Install Freighter, switch to Futurenet, refresh page

ISSUE: "Dashboard shows loading forever"
FIX: Check backend is running, check Supabase connection

ISSUE: "Builder blocks won't connect"
FIX: Make sure block types are compatible (Asset‚ÜíCondition‚ÜíAction)

ISSUE: "Vault deployment fails"
FIX: Ensure contracts are built (stellar contract build)
     Ensure wallet has XLM balance
     Check private key is correct

ISSUE: "Sentiment always shows 'N/A'"
FIX: Expected if no API keys configured (falls back to mock)

ISSUE: "Backend returns 500 errors"
FIX: Check .env file has correct values
     Check Supabase is accessible
     Check backend terminal for error details

===========================================
 NEXT STEPS AFTER TESTING
===========================================

IF ALL TESTS PASSED:
‚Üí You have a working MVP! 
‚Üí Try creating real vaults on Futurenet
‚Üí Experiment with different strategies
‚Üí Check the spec for advanced features to implement

IF SOME TESTS FAILED:
‚Üí Note which tests failed
‚Üí Check troubleshooting section
‚Üí Review SETUP.md steps
‚Üí Check environment variables
‚Üí Look at browser/backend logs for errors

IF MANY TESTS FAILED:
‚Üí Verify setup is complete (SETUP.md)
‚Üí Check all services are running
‚Üí Verify database migrations ran successfully
‚Üí Review error messages carefully

===========================================
 GETTING HELP
===========================================

1. Check browser console (F12) for JavaScript errors
2. Check backend terminal for API errors
3. Check Supabase logs in dashboard
4. Review SETUP.md for configuration issues
5. Check tasks.md to see what's implemented

===========================================
 HAPPY TESTING! üöÄ
===========================================

You're testing a DeFi yield optimization platform that:
- Connects to Stellar wallets
- Lets users design strategies visually
- Deploys smart contracts to Stellar
- Uses AI to suggest improvements
- Simulates historical performance

This is an MVP - some features are still in development.
Focus on testing the core flows first!
